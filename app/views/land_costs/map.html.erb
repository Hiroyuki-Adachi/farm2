<div class="row">
  <div class="col-md-8">
    <h1>土地利用地図</h1>
  </div>
  <div class="col-md-2">
    <%= date_field_tag :target, @target, {class: "form-control", data: {url: map_land_costs_path}, onchange: "changeTarget(this)"} %>
  </div>
</div>
<div class="row">
  <div class="col-md-12">
    <div id="map" class="embed-responsive embed-responsive-16by9"></div>
  </div>
</div>
<div class="row">
  <div class="col-md-12">
    <h3 id="land_info">&nbsp;</h3>
  </div>
</div>
<div class="row">
  <% @work_types.each_with_index do |work_type, i| %>
    <div class="btn-group" style="background-color: <%= work_type.bg_color%>;">
      <span id="work_type_<%= work_type.id %>" style="width:100px;"><%= work_type.name %></span>
      <span id="land_area_<%= work_type.id %>" class="label text-right area-sum" style="width: 50px;">0.0</span>
    </div>
  <% end %>
</div>
<div id="btn_toolbar" class="btn-toolbar">
  <div class="btn-group mr-2">
    <%= link_to '戻る', land_costs_path, class: "btn btn-outline-dark" %>
  </div>
</div>
<%= hidden_field_tag :location, "[#{current_location}]" %>
<% @costs.each do |cost| %>
  <%= hidden_field_tag :regions, cost.land.region, {id: "land_#{cost.land.id}", data: {id: cost.land.id, place: cost.land.place, area: cost.land.area, owner: cost.land.owner.name, color: cost.work_type.bg_color, "work-type" => cost.work_type_id}} %>
<% end %>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["API_KEY"]%>&callback=initMap" async defer></script>
<script>
function initMap(){
  const org = JSON.parse(document.getElementById("location").value);
  const pos = new google.maps.LatLng(org[0], org[1]);

  const map = new google.maps.Map(document.getElementById('map'), {
    center: pos,
    zoom: 16,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  const marker = new google.maps.Marker({
    position: pos,
    title : "<%= current_organization.name %>",
    map: map
  });

  let landRegions = {};
  document.getElementsByName("regions").forEach(function(land) {
    let paths = [];
    JSON.parse(land.value.replace(/\(/g, "[").replace(/\)/g, "]")).forEach(function(rg) {
      paths.push({lat: rg[0], lng: rg[1]});
    });
    landRegions[land.dataset.id] = new google.maps.Polygon({
      paths: paths,
      strokeColor: land.dataset.color,
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: land.dataset.color,
      fillOpacity: 0.35,
      landId: land.dataset.id,
      map: map
    });

    landRegions[land.dataset.id].addListener("mouseover", function(arg) {
      const land = document.getElementById("land_" + this.landId);
      document.getElementById("land_info").innerText = `${land.dataset.place}(${land.dataset.owner}):${land.dataset.area}a`;
    });

    landRegions[land.dataset.id].addListener("mouseout", function(arg) {
      document.getElementById("land_info").innerHTML = "&nbsp;";
    });
  });

  dispSum();
}

function dispSum() {
  const landAreas = {};
  document.getElementsByName("regions").forEach(function(land) {
    if(land.value != "") {
      landAreas[land.dataset.workType] = new Decimal(landAreas[land.dataset.workType] || 0);
      landAreas[land.dataset.workType] = landAreas[land.dataset.workType].plus(land.dataset.area);
    }
  });
  let sumArea = new Decimal(0);
  Object.keys(landAreas).forEach(function(key) {
    document.getElementById("land_area_" + key).innerText = landAreas[key].toFixed(1);
    sumArea = sumArea.plus(landAreas[key]);
  });
}

function changeTarget(target) {
  location.href = target.dataset.url + "?target=" + target.value;
}
</script>
