// terra-draw-google-maps-adapter@1.1.0 downloaded from https://ga.jspm.io/npm:terra-draw-google-maps-adapter@1.1.0/dist/terra-draw-google-maps-adapter.modern.js

import{TerraDrawExtend as e}from"terra-draw";class t extends e.TerraDrawBaseAdapter{constructor(e){super(e),this._cursor=void 0,this._cursorStyleSheet=void 0,this._lib=void 0,this._map=void 0,this._overlay=void 0,this._clickEventListener=void 0,this._mouseMoveEventListener=void 0,this._readyCalled=!1,this.renderedFeatureIds=new Set,this._lib=e.lib,this._map=e.map,this._coordinatePrecision="number"==typeof e.coordinatePrecision?e.coordinatePrecision:9}get _layers(){var e;return Boolean((null==(e=this.renderedFeatureIds)?void 0:e.size)>0)}circlePath(e,r,o){const i=2*o;return`M ${e} ${r} m -${o}, 0 a ${o},${o} 0 1,0 ${i},0 a ${o},${o} 0 1,0 -${i},0`}register(e){super.register(e),this._overlay=new this._lib.OverlayView,this._overlay.draw=function(){},this._overlay.onAdd=()=>{var e;null!=(e=this._currentModeCallbacks)&&e.onReady&&!this._readyCalled&&(this._currentModeCallbacks.onReady(),this._readyCalled=!0)},this._overlay.setMap(this._map),this._overlay.onRemove=()=>{},this._clickEventListener=this._map.data.addListener("click",(e=>{const r=this._listeners.find((({name:e})=>"click"===e));r&&r.callback(e)})),this._mouseMoveEventListener=this._map.data.addListener("mousemove",(e=>{const r=this._listeners.find((({name:e})=>"mousemove"===e));r&&r.callback(e)}))}unregister(){var e,r;super.unregister(),null==(e=this._clickEventListener)||e.remove(),null==(r=this._mouseMoveEventListener)||r.remove(),this._overlay&&this._overlay.getMap()&&this._overlay.setMap(null),this._overlay=void 0,this._readyCalled=!1}getLngLatFromEvent(e){if(!this._overlay)throw new Error("cannot get overlay");const r=this._map.getBounds();if(!r)return null;const o=r.getNorthEast(),i=r.getSouthWest(),n=new this._lib.LatLngBounds(i,o),s=this._map.getDiv(),a=e.clientX-s.getBoundingClientRect().left,l=e.clientY-s.getBoundingClientRect().top,d=new this._lib.Point(a,l),c=this._overlay.getProjection();if(!c)return null;const h=c.fromContainerPixelToLatLng(d);return h&&n.contains(h)?{lng:h.lng(),lat:h.lat()}:null}getMapEventElement(){return this._map.getDiv().querySelector('div[style*="z-index: 3;"]')}project(e,r){if(!this._overlay)throw new Error("cannot get overlay");if(void 0===this._map.getBounds())throw new Error("cannot get bounds");const o=this._overlay.getProjection();if(void 0===o)throw new Error("cannot get projection");const i=o.fromLatLngToContainerPixel(new this._lib.LatLng(r,e));if(null===i)throw new Error("cannot project coordinates");return{x:i.x,y:i.y}}unproject(e,r){if(!this._overlay)throw new Error("cannot get overlay");const o=this._overlay.getProjection();if(void 0===o)throw new Error("cannot get projection");const i=o.fromContainerPixelToLatLng(new this._lib.Point(e,r));if(null===i)throw new Error("cannot unproject coordinates");return{lng:i.lng(),lat:i.lat()}}setCursor(e){if(e!==this._cursor){if(this._cursorStyleSheet&&(this._cursorStyleSheet.remove(),this._cursorStyleSheet=void 0),"unset"!==e){const r=this._map.getDiv().querySelector(".gm-style > div");if(r){r.classList.add("terra-draw-google-maps");const o=document.createElement("style");o.innerHTML=`.terra-draw-google-maps { cursor: ${e} !important; }`,document.getElementsByTagName("head")[0].appendChild(o),this._cursorStyleSheet=o}}this._cursor=e}}setDoubleClickToZoom(e){this._map.setOptions(e?{disableDoubleClickZoom:!1}:{disableDoubleClickZoom:!0})}setDraggability(e){this._map.setOptions({draggable:e})}render(e,r){this._layers&&(e.deletedIds.forEach((e=>{const r=this._map.data.getFeatureById(e);r&&(this._map.data.remove(r),this.renderedFeatureIds.delete(e))})),e.updated.forEach((e=>{if(!e||!e.id)throw new Error("Feature is not valid");const r=this._map.data.getFeatureById(e.id);if(!r)throw new Error("Feature could not be found by Google Maps API");switch(r.forEachProperty(((e,o)=>{r.setProperty(o,void 0)})),Object.keys(e.properties).forEach((o=>{r.setProperty(o,e.properties[o])})),e.geometry.type){case"Point":{const o=e.geometry.coordinates;r.setGeometry(new this._lib.Data.Point(new this._lib.LatLng(o[1],o[0])))}break;case"LineString":{const o=e.geometry.coordinates,i=[];for(let e=0;e<o.length;e++){const r=o[e],n=new this._lib.LatLng(r[1],r[0]);i.push(n)}r.setGeometry(new this._lib.Data.LineString(i))}break;case"Polygon":{const o=e.geometry.coordinates,i=[];for(let e=0;e<o.length;e++){const r=[];for(let i=0;i<o[e].length;i++){const n=new this._lib.LatLng(o[e][i][1],o[e][i][0]);r.push(n)}i.push(r)}r.setGeometry(new this._lib.Data.Polygon(i))}}})),e.created.forEach((e=>{this.renderedFeatureIds.add(e.id),this._map.data.addGeoJson(e)}))),e.created.forEach((e=>{this.renderedFeatureIds.add(e.id)}));const o={type:"FeatureCollection",features:[...e.created]};this._map.data.addGeoJson(o),this._map.data.setStyle((e=>{const o=e.getProperty("mode"),i=e.getGeometry();if(!i)throw new Error("Google Maps geometry not found");const n=i.getType(),s={},a=e.getId();e.forEachProperty(((e,r)=>{s[r]=e}));const l=r[o]({type:"Feature",id:a,geometry:{type:n,coordinates:[]},properties:s});switch(n){case"Point":return l.markerUrl?{clickable:!1,icon:{url:l.markerUrl,scaledSize:l.markerWidth&&l.markerHeight?new this._lib.Size(l.markerWidth,l.markerHeight):void 0},zIndex:l.zIndex}:{clickable:!1,icon:{path:this.circlePath(0,0,l.pointWidth),fillColor:l.pointColor,fillOpacity:1,strokeColor:l.pointOutlineColor,strokeWeight:l.pointOutlineWidth,rotation:0,scale:1},zIndex:l.zIndex};case"LineString":return{strokeColor:l.lineStringColor,strokeWeight:l.lineStringWidth,zIndex:l.zIndex};case"Polygon":return{strokeColor:l.polygonOutlineColor,strokeWeight:l.polygonOutlineWidth,fillOpacity:l.polygonFillOpacity,fillColor:l.polygonFillColor,zIndex:l.zIndex}}throw Error("Unknown feature type")}))}clearLayers(){this._layers&&(this._map.data.forEach((e=>{const r=e.getId();this.renderedFeatureIds.has(r)&&this._map.data.remove(e)})),this.renderedFeatureIds=new Set)}clear(){this._currentModeCallbacks&&(this._currentModeCallbacks.onClear(),this.clearLayers())}getCoordinatePrecision(){return super.getCoordinatePrecision()}}export{t as TerraDrawGoogleMapsAdapter};

