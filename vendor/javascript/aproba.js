var e={};e=validate;function isArguments(e){return null!=e&&"object"===typeof e&&e.hasOwnProperty("callee")}const n={"*":{label:"any",check:()=>true},A:{label:"array",check:e=>Array.isArray(e)||isArguments(e)},S:{label:"string",check:e=>"string"===typeof e},N:{label:"number",check:e=>"number"===typeof e},F:{label:"function",check:e=>"function"===typeof e},O:{label:"object",check:e=>"object"===typeof e&&null!=e&&!n.A.check(e)&&!n.E.check(e)},B:{label:"boolean",check:e=>"boolean"===typeof e},E:{label:"error",check:e=>e instanceof Error},Z:{label:"null",check:e=>null==e}};function addSchema(e,n){const r=n[e.length]=n[e.length]||[];-1===r.indexOf(e)&&r.push(e)}function validate(e,r){if(2!==arguments.length)throw wrongNumberOfArgs(["SA"],arguments.length);if(!e)throw missingRequiredArg(0,"rawSchemas");if(!r)throw missingRequiredArg(1,"args");if(!n.S.check(e))throw invalidType(0,["string"],e);if(!n.A.check(r))throw invalidType(1,["array"],r);const t=e.split("|");const c={};t.forEach(e=>{for(let r=0;r<e.length;++r){const t=e[r];if(!n[t])throw unknownType(r,t)}if(/E.*E/.test(e))throw moreThanOneError(e);addSchema(e,c);if(/E/.test(e)){addSchema(e.replace(/E.*$/,"E"),c);addSchema(e.replace(/E/,"Z"),c);1===e.length&&addSchema("",c)}});let o=c[r.length];if(!o)throw wrongNumberOfArgs(Object.keys(c),r.length);for(let e=0;e<r.length;++e){let t=o.filter(t=>{const c=t[e];const o=n[c].check;return o(r[e])});if(!t.length){const t=o.map(r=>n[r[e]].label).filter(e=>null!=e);throw invalidType(e,t,r[e])}o=t}}function missingRequiredArg(e){return newException("EMISSINGARG","Missing required argument #"+(e+1))}function unknownType(e,n){return newException("EUNKNOWNTYPE","Unknown type "+n+" in argument #"+(e+1))}function invalidType(e,r,t){let c;Object.keys(n).forEach(e=>{n[e].check(t)&&(c=n[e].label)});return newException("EINVALIDTYPE","Argument #"+(e+1)+": Expected "+englishList(r)+" but got "+c)}function englishList(e){return e.join(", ").replace(/, ([^,]+)$/," or $1")}function wrongNumberOfArgs(e,n){const r=englishList(e);const t=e.every(e=>1===e.length)?"argument":"arguments";return newException("EWRONGARGCOUNT","Expected "+r+" "+t+" but got "+n)}function moreThanOneError(e){return newException("ETOOMANYERRORTYPES",'Only one error type per argument signature is allowed, more than one found in "'+e+'"')}function newException(e,n){const r=new Error(n);r.code=e;Error.captureStackTrace&&Error.captureStackTrace(r,validate);return r}var r=e;export default r;

